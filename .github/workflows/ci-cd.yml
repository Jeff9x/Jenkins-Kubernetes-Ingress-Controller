# .github/workflows/ci-cd.yml
# This revised workflow includes best practices for robustness and maintainability.
name: Build, Push, and Deploy to Kubernetes

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DOCKER_HUB_USERNAME: jeffare9x
  # Define app names in one place for easy maintenance
  APP_NAMES: '["app-one", "app-two", "app-three"]'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # Use a matrix strategy to avoid repeating build steps for each app
    strategy:
      matrix:
        app: ${{ fromJson(env.APP_NAMES) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push ${{ matrix.app }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.app }}
          # Assuming each app has a file named '.dockerfile' in its directory
          file: ./${{ matrix.app }}/.dockerfile
          push: true
          # BEST PRACTICE: Tag with the unique Git SHA for predictable rollbacks
          tags: ${{ env.DOCKER_HUB_USERNAME }}/${{ matrix.app }}:${{ github.sha }}
          # Also push the latest tag for convenience, but don't use it for deployments
          # tags: |
          #   ${{ env.DOCKER_HUB_USERNAME }}/${{ matrix.app }}:${{ github.sha }}
          #   ${{ env.DOCKER_HUB_USERNAME }}/${{ matrix.app }}:latest

  deploy:
    runs-on: ubuntu-latest
    # This job depends on all matrix jobs in 'build-and-push' completing successfully
    needs: build-and-push
    if: github.ref == 'refs/heads/main' # Only deploy when pushing to the main branch
    steps:
      # CRITICAL FIX: You must check out the code to access your YAML files
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Update Kubernetes manifests with new image tag
        run: |
          # This loop replaces the image tag in each deployment file
          # It finds the line 'image:' and replaces the whole line
          for app in ${{ join(fromJson(env.APP_NAMES), ' ') }}; do
            sed -i "s|image:.*|image: ${{ env.DOCKER_HUB_USERNAME }}/$app:${{ github.sha }}|g" ./$app/deployment.yaml
          done

      - name: Deploy to Kubernetes
        run: |
          # Exit immediately if a command fails
          set -e
          
          # Set up KUBECONFIG from the secret
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig
          export KUBECONFIG=./kubeconfig
          
          # Verify connection to the cluster (important for debugging)
          echo "Verifying cluster connectivity..."
          kubectl cluster-info

          # Apply all manifests
          kubectl apply -f ./app-one/deployment.yaml
          kubectl apply -f ./app-two/deployment.yaml
          kubectl apply -f ./app-three/deployment.yaml
          kubectl apply -f ./ingress/ingress.yaml

  verify:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'
          
      - name: Verify Kubernetes Deployments
        run: |
          echo "${{ secrets.KUBECONFIG }}" > kubeconfig
          export KUBECONFIG=./kubeconfig
          
          echo "Waiting for deployments to complete..."
          # BEST PRACTICE: Use 'rollout status' for reliable verification instead of a static sleep
          kubectl rollout status deployment/app-one-deployment --timeout=120s
          kubectl rollout status deployment/app-two-deployment --timeout=120s
          kubectl rollout status deployment/app-three-deployment --timeout=120s
          
          echo "--- All deployments successful! ---"
          
          echo "--- Getting resource status ---"
          kubectl get deployments
          kubectl get services
          kubectl get ingress
