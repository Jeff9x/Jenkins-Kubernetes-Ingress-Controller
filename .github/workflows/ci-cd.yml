name: Manual Deployment to VM

# Define environment variables for the workflow
env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  IMAGE_NAME: my-app
  DEPLOYMENT_NAME: my-app-deployment
  CONTAINER_NAME: my-app-container

# This workflow is triggered manually
on:
  workflow_dispatch:
    # Adds an input field in the GitHub UI
    inputs:
      image_tag:
        description: 'The Docker image tag to deploy (e.g., "latest" or a commit SHA)'
        required: true
        default: 'latest'

jobs:
  deploy:
    name: ðŸš€ Deploy to Kubernetes
    runs-on: self-hosted

    steps:
      - name: 1. Checkout Code
        uses: actions/checkout@v4

      - name: 2. Configure kubectl
        run: |
          echo "Setting up kubectl..."
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ./kubeconfig
          export KUBECONFIG=./kubeconfig
          echo "âœ… kubectl configured."

      - name: 3. Update Kubernetes Manifests with Kustomize
        run: |
          echo "Updating image tag to: ${{ github.event.inputs.image_tag }}"
          # Construct the full image name and tag from inputs and secrets
          FULL_IMAGE_NAME="${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}"
          
          cd k8s/overlays/production
          kustomize edit set image ${{ env.CONTAINER_NAME }}=${FULL_IMAGE_NAME}
          echo "âœ… Kustomize files updated."
          cd ../../..

      - name: 4. Apply New Configuration
        run: |
          echo "Applying new configuration to the cluster..."
          export KUBECONFIG=./kubeconfig
          kustomize build k8s/overlays/production | kubectl apply -f -
          echo "âœ… Manifests applied."

      - name: 5. Verify Deployment
        run: |
          echo "Waiting for deployment to complete..."
          export KUBECONFIG=./kubeconfig
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} --timeout=120s
          echo "âœ… Deployment successfully rolled out!"
